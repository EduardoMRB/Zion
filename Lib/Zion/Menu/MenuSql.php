<?phpnamespace Zion\Menu;use Zion\Banco\Conexao;abstract class MenuSql{    protected $con;    public function __construct()    {        $this->con = Conexao::conectar();    }    /**     * Retorna o número de Grupos disponíveis para um determinado usuário.     * @param int $usuarioCod     * @return int     */    protected function gruposDiponiveisUsuario($usuarioCod)    {        $qb = $this->con->qb();        $sql = $qb->select('a.grupoCod')            ->from('_grupo', 'a')            ->innerJoin('a', '_modulo', 'b', 'a.moduloCod = b.moduloCod')            ->innerJoin('b', '_acao_modulo', 'c', 'b.moduloCod = c.moduloCod')            ->innerJoin('c', '_permissao', 'd', 'c.acaomoduloCod = d.acaomoduloCod')            ->where($qb->expr()->eq('d.usuarioCod', ':usuarioCod'))            ->setParameter('usuarioCod', $usuarioCod, \PDO::PARAM_INT)            ->setFirstResult(0)            ->setMaxResults(1);        return $this->con->execNLinhas($sql);    }    /**     * Retorna um objeto QueryBuilder com todos os grupos disponíveis sem      * fazer qualquer tipo de restrição ordenados por "grupoPosicao" ascendente     * @return \Doctrine\DBAL\Query\QueryBuilder     */    protected function gruposDiponiveisSql()    {        $qb = $this->con->qb();        $qb->select('grupoCod,grupoNome,grupoPacote,grupoClass')            ->from('_grupo', '')            ->orderBy('grupoPosicao', 'ASC');        return $qb;    }    /**     * Retorna um objeto QueryBuilder com todos os módulos disponíveis sem      * fazer qualquer tipo de restrição ordenados por "moduloPosicao" ascendente     * @return \Doctrine\DBAL\Query\QueryBuilder     */    protected function modulosDiponiveisSql()    {        $qb = $this->con->qb();        $qb->select('*')            ->from('_modulo', '')            ->orderBy('moduloPosicao', 'ASC');        return $qb;    }    /**     * Retorna um objeto QueryBuilder com todos os módulos que o usuário tem     * privilegios de acesso     * @param int $usuarioCod     * @return \Doctrine\DBAL\Query\QueryBuilder     */    protected function usuarioPermissaoModuloSql($usuarioCod)    {        $qb = $this->con->qb();        $qb->select('d.moduloCod')            ->from('_usuario', 'a')            ->innerJoin('a', '_perfil', 'b', 'a.perfilCod = b.perfilCod')            ->innerJoin('b', '_permissao', 'c', 'b.perfilCod = c.perfilCod')            ->innerJoin('c', '_acao_modulo', 'd', 'c.acaoModuloCod = d.acaoModuloCod')            ->where($qb->expr()->isNotNull('c.permissaoCod'))            ->andWhere($qb->expr()->eq('a.usuarioCod', ':usuarioCod'))            ->setParameter(':usuarioCod', $usuarioCod, \PDO::PARAM_INT)            ->groupBy('d.moduloCod');        return $qb;    }    /**     * Retorna um objeto um array com os dados do módulo     * @param int $moduloCod     * @param bool $visivel     * @return array     */    protected function dadosModulo($moduloCod, $visivel = true)    {        $qb = $this->con->qb();        $qb->select('*')            ->from('_modulo', 'a')            ->innerJoin('a', '_grupomodulo', 'b')            ->andWhere($qb->expr()->eq('a.moduloCod', ':moduloCod'))            ->setParameter(':moduloCod', $moduloCod, \PDO::PARAM_INT);        if ($visivel === true) {            $qb->andWhere($qb->expr()->eq('a.visivelMenu', $qb->expr()->literal('S')));        }        return $this->con->execLinha($qb);    }    /**     * Retorna um resultset com os módulos referentes ao código do módulo      * informado no parametro int $referencia     * @param int $referencia     * @param bool $visivel     * @return resultset     */    protected function modulosReferentes($referencia, $visivel = true)    {        $qb = $this->con->qb();        $qb->select('moduloCod', 'nomeMenu')            ->from('_modulo', '')            ->andWhere($qb->expr()->eq('moduloReferente', ':moduloReferente'))            ->setParameter('moduloReferente', $referencia, \PDO::PARAM_INT);        if ($visivel === true) {            $qb->andWhere($qb->expr()->eq('visivelMenu', $qb->expr()->literal('S')));        }        $qb->orderBy('posicao', 'ASC');        return $this->con->executar($qb);    }}